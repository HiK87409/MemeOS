{
  "version": 3,
  "sources": ["../../date-fns-tz/dist/esm/_lib/tzIntlTimeZoneName/index.js", "../../date-fns-tz/dist/esm/_lib/tzTokenizeDate/index.js", "../../date-fns-tz/dist/esm/_lib/newDateUTC/index.js", "../../date-fns-tz/dist/esm/_lib/tzParseTimezone/index.js", "../../date-fns-tz/dist/esm/format/formatters/index.js", "../../date-fns-tz/dist/esm/_lib/getTimezoneOffsetInMilliseconds/index.js", "../../date-fns-tz/dist/esm/_lib/tzPattern/index.js", "../../date-fns-tz/dist/esm/toDate/index.js", "../../date-fns-tz/dist/esm/format/index.js", "../../date-fns-tz/dist/esm/toZonedTime/index.js", "../../date-fns-tz/dist/esm/formatInTimeZone/index.js", "../../date-fns-tz/dist/esm/fromZonedTime/index.js", "../../date-fns-tz/dist/esm/getTimezoneOffset/index.js"],
  "sourcesContent": ["import { getDefaultOptions } from 'date-fns';\r\n/**\r\n * Returns the formatted time zone name of the provided `timeZone` or the current\r\n * system time zone if omitted, accounting for DST according to the UTC value of\r\n * the date.\r\n */\r\nexport function tzIntlTimeZoneName(length, date, options) {\r\n    const defaultOptions = getDefaultOptions();\r\n    const dtf = getDTF(length, options.timeZone, options.locale ?? defaultOptions.locale);\r\n    return 'formatToParts' in dtf ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date);\r\n}\r\nfunction partsTimeZone(dtf, date) {\r\n    const formatted = dtf.formatToParts(date);\r\n    for (let i = formatted.length - 1; i >= 0; --i) {\r\n        if (formatted[i].type === 'timeZoneName') {\r\n            return formatted[i].value;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nfunction hackyTimeZone(dtf, date) {\r\n    const formatted = dtf.format(date).replace(/\\u200E/g, '');\r\n    const tzNameMatch = / [\\w-+ ]+$/.exec(formatted);\r\n    return tzNameMatch ? tzNameMatch[0].substr(1) : '';\r\n}\r\n// If a locale has been provided `en-US` is used as a fallback in case it is an\r\n// invalid locale, otherwise the locale is left undefined to use the system locale.\r\nfunction getDTF(length, timeZone, locale) {\r\n    return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {\r\n        timeZone: timeZone,\r\n        timeZoneName: length,\r\n    });\r\n}\r\n", "/**\r\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\r\n * `date` as it will be rendered in the `timeZone`.\r\n */\r\nexport function tzTokenizeDate(date, timeZone) {\r\n    const dtf = getDateTimeFormat(timeZone);\r\n    return 'formatToParts' in dtf ? partsOffset(dtf, date) : hackyOffset(dtf, date);\r\n}\r\nconst typeToPos = {\r\n    year: 0,\r\n    month: 1,\r\n    day: 2,\r\n    hour: 3,\r\n    minute: 4,\r\n    second: 5,\r\n};\r\nfunction partsOffset(dtf, date) {\r\n    try {\r\n        const formatted = dtf.formatToParts(date);\r\n        const filled = [];\r\n        for (let i = 0; i < formatted.length; i++) {\r\n            const pos = typeToPos[formatted[i].type];\r\n            if (pos !== undefined) {\r\n                filled[pos] = parseInt(formatted[i].value, 10);\r\n            }\r\n        }\r\n        return filled;\r\n    }\r\n    catch (error) {\r\n        if (error instanceof RangeError) {\r\n            return [NaN];\r\n        }\r\n        throw error;\r\n    }\r\n}\r\nfunction hackyOffset(dtf, date) {\r\n    const formatted = dtf.format(date);\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\r\n    // const [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\r\n    // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\r\n    return [\r\n        parseInt(parsed[3], 10),\r\n        parseInt(parsed[1], 10),\r\n        parseInt(parsed[2], 10),\r\n        parseInt(parsed[4], 10),\r\n        parseInt(parsed[5], 10),\r\n        parseInt(parsed[6], 10),\r\n    ];\r\n}\r\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\r\n// to get deterministic local date/time output according to the `en-US` locale which\r\n// can be used to extract local time parts as necessary.\r\nconst dtfCache = {};\r\n// New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\r\nconst testDateFormatted = new Intl.DateTimeFormat('en-US', {\r\n    hourCycle: 'h23',\r\n    timeZone: 'America/New_York',\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit',\r\n}).format(new Date('2014-06-25T04:00:00.123Z'));\r\nconst hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' ||\r\n    testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\r\nfunction getDateTimeFormat(timeZone) {\r\n    if (!dtfCache[timeZone]) {\r\n        dtfCache[timeZone] = hourCycleSupported\r\n            ? new Intl.DateTimeFormat('en-US', {\r\n                hourCycle: 'h23',\r\n                timeZone: timeZone,\r\n                year: 'numeric',\r\n                month: 'numeric',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit',\r\n            })\r\n            : new Intl.DateTimeFormat('en-US', {\r\n                hour12: false,\r\n                timeZone: timeZone,\r\n                year: 'numeric',\r\n                month: 'numeric',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit',\r\n            });\r\n    }\r\n    return dtfCache[timeZone];\r\n}\r\n", "/**\r\n * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work\r\n * otherwise due to the nature of the\r\n * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.\r\n *\r\n * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.\r\n */\r\nexport function newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {\r\n    const utcDate = new Date(0);\r\n    utcDate.setUTCFullYear(fullYear, month, day);\r\n    utcDate.setUTCHours(hour, minute, second, millisecond);\r\n    return utcDate;\r\n}\r\n", "import { tzTokenizeDate } from '../tzTokenizeDate/index.js';\r\nimport { newDateUTC } from '../newDateUTC/index.js';\r\nconst MILLISECONDS_IN_HOUR = 3600000;\r\nconst MILLISECONDS_IN_MINUTE = 60000;\r\nconst patterns = {\r\n    timezone: /([Z+-].*)$/,\r\n    timezoneZ: /^(Z)$/,\r\n    timezoneHH: /^([+-]\\d{2})$/,\r\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\r\n};\r\n// Parse constious time zone offset formats to an offset in milliseconds\r\nexport function tzParseTimezone(timezoneString, date, isUtcDate) {\r\n    // Empty string\r\n    if (!timezoneString) {\r\n        return 0;\r\n    }\r\n    // Z\r\n    let token = patterns.timezoneZ.exec(timezoneString);\r\n    if (token) {\r\n        return 0;\r\n    }\r\n    let hours;\r\n    let absoluteOffset;\r\n    // ±hh\r\n    token = patterns.timezoneHH.exec(timezoneString);\r\n    if (token) {\r\n        hours = parseInt(token[1], 10);\r\n        if (!validateTimezone(hours)) {\r\n            return NaN;\r\n        }\r\n        return -(hours * MILLISECONDS_IN_HOUR);\r\n    }\r\n    // ±hh:mm or ±hhmm\r\n    token = patterns.timezoneHHMM.exec(timezoneString);\r\n    if (token) {\r\n        hours = parseInt(token[2], 10);\r\n        const minutes = parseInt(token[3], 10);\r\n        if (!validateTimezone(hours, minutes)) {\r\n            return NaN;\r\n        }\r\n        absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\r\n        return token[1] === '+' ? -absoluteOffset : absoluteOffset;\r\n    }\r\n    // IANA time zone\r\n    if (isValidTimezoneIANAString(timezoneString)) {\r\n        date = new Date(date || Date.now());\r\n        const utcDate = isUtcDate ? date : toUtcDate(date);\r\n        const offset = calcOffset(utcDate, timezoneString);\r\n        const fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\r\n        return -fixedOffset;\r\n    }\r\n    return NaN;\r\n}\r\nfunction toUtcDate(date) {\r\n    return newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n}\r\nfunction calcOffset(date, timezoneString) {\r\n    const tokens = tzTokenizeDate(date, timezoneString);\r\n    // ms dropped because it's not provided by tzTokenizeDate\r\n    const asUTC = newDateUTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\r\n    let asTS = date.getTime();\r\n    const over = asTS % 1000;\r\n    asTS -= over >= 0 ? over : 1000 + over;\r\n    return asUTC - asTS;\r\n}\r\nfunction fixOffset(date, offset, timezoneString) {\r\n    const localTS = date.getTime();\r\n    // Our UTC time is just a guess because our offset is just a guess\r\n    let utcGuess = localTS - offset;\r\n    // Test whether the zone matches the offset for this ts\r\n    const o2 = calcOffset(new Date(utcGuess), timezoneString);\r\n    // If so, offset didn't change, and we're done\r\n    if (offset === o2) {\r\n        return offset;\r\n    }\r\n    // If not, change the ts by the difference in the offset\r\n    utcGuess -= o2 - offset;\r\n    // If that gives us the local time we want, we're done\r\n    const o3 = calcOffset(new Date(utcGuess), timezoneString);\r\n    if (o2 === o3) {\r\n        return o2;\r\n    }\r\n    // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\r\n    return Math.max(o2, o3);\r\n}\r\nfunction validateTimezone(hours, minutes) {\r\n    return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59));\r\n}\r\nconst validIANATimezoneCache = {};\r\nfunction isValidTimezoneIANAString(timeZoneString) {\r\n    if (validIANATimezoneCache[timeZoneString])\r\n        return true;\r\n    try {\r\n        new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString });\r\n        validIANATimezoneCache[timeZoneString] = true;\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\n", "import { tzIntlTimeZoneName } from '../../_lib/tzIntlTimeZoneName/index.js';\r\nimport { tzParseTimezone } from '../../_lib/tzParseTimezone/index.js';\r\nconst MILLISECONDS_IN_MINUTE = 60 * 1000;\r\nexport const formatters = {\r\n    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\r\n    X: function (date, token, options) {\r\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\r\n        if (timezoneOffset === 0) {\r\n            return 'Z';\r\n        }\r\n        switch (token) {\r\n            // Hours and optional minutes\r\n            case 'X':\r\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\r\n            // Hours, minutes and optional seconds without `:` delimeter\r\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n            // so this token always has the same output as `XX`\r\n            case 'XXXX':\r\n            case 'XX': // Hours and minutes without `:` delimeter\r\n                return formatTimezone(timezoneOffset);\r\n            // Hours, minutes and optional seconds with `:` delimeter\r\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n            // so this token always has the same output as `XXX`\r\n            case 'XXXXX':\r\n            case 'XXX': // Hours and minutes with `:` delimeter\r\n            default:\r\n                return formatTimezone(timezoneOffset, ':');\r\n        }\r\n    },\r\n    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\r\n    x: function (date, token, options) {\r\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\r\n        switch (token) {\r\n            // Hours and optional minutes\r\n            case 'x':\r\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\r\n            // Hours, minutes and optional seconds without `:` delimeter\r\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n            // so this token always has the same output as `xx`\r\n            case 'xxxx':\r\n            case 'xx': // Hours and minutes without `:` delimeter\r\n                return formatTimezone(timezoneOffset);\r\n            // Hours, minutes and optional seconds with `:` delimeter\r\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\r\n            // so this token always has the same output as `xxx`\r\n            case 'xxxxx':\r\n            case 'xxx': // Hours and minutes with `:` delimeter\r\n            default:\r\n                return formatTimezone(timezoneOffset, ':');\r\n        }\r\n    },\r\n    // Timezone (GMT)\r\n    O: function (date, token, options) {\r\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\r\n        switch (token) {\r\n            // Short\r\n            case 'O':\r\n            case 'OO':\r\n            case 'OOO':\r\n                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\r\n            // Long\r\n            case 'OOOO':\r\n            default:\r\n                return 'GMT' + formatTimezone(timezoneOffset, ':');\r\n        }\r\n    },\r\n    // Timezone (specific non-location)\r\n    z: function (date, token, options) {\r\n        switch (token) {\r\n            // Short\r\n            case 'z':\r\n            case 'zz':\r\n            case 'zzz':\r\n                return tzIntlTimeZoneName('short', date, options);\r\n            // Long\r\n            case 'zzzz':\r\n            default:\r\n                return tzIntlTimeZoneName('long', date, options);\r\n        }\r\n    },\r\n};\r\nfunction getTimeZoneOffset(timeZone, originalDate) {\r\n    const timeZoneOffset = timeZone\r\n        ? tzParseTimezone(timeZone, originalDate, true) / MILLISECONDS_IN_MINUTE\r\n        : originalDate?.getTimezoneOffset() ?? 0;\r\n    if (Number.isNaN(timeZoneOffset)) {\r\n        throw new RangeError('Invalid time zone specified: ' + timeZone);\r\n    }\r\n    return timeZoneOffset;\r\n}\r\nfunction addLeadingZeros(number, targetLength) {\r\n    const sign = number < 0 ? '-' : '';\r\n    let output = Math.abs(number).toString();\r\n    while (output.length < targetLength) {\r\n        output = '0' + output;\r\n    }\r\n    return sign + output;\r\n}\r\nfunction formatTimezone(offset, delimiter = '') {\r\n    const sign = offset > 0 ? '-' : '+';\r\n    const absOffset = Math.abs(offset);\r\n    const hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\r\n    const minutes = addLeadingZeros(Math.floor(absOffset % 60), 2);\r\n    return sign + hours + delimiter + minutes;\r\n}\r\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\r\n    if (offset % 60 === 0) {\r\n        const sign = offset > 0 ? '-' : '+';\r\n        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\r\n    }\r\n    return formatTimezone(offset, delimiter);\r\n}\r\nfunction formatTimezoneShort(offset, delimiter = '') {\r\n    const sign = offset > 0 ? '-' : '+';\r\n    const absOffset = Math.abs(offset);\r\n    const hours = Math.floor(absOffset / 60);\r\n    const minutes = absOffset % 60;\r\n    if (minutes === 0) {\r\n        return sign + String(hours);\r\n    }\r\n    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\r\n}\r\n", "/**\r\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\r\n * They usually appear for dates that denote time before the timezones were introduced\r\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\r\n * and GMT+01:00:00 after that date)\r\n *\r\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\r\n * which would lead to incorrect calculations.\r\n *\r\n * This function returns the timezone offset in milliseconds that takes seconds in account.\r\n */\r\nexport function getTimezoneOffsetInMilliseconds(date) {\r\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n    utcDate.setUTCFullYear(date.getFullYear());\r\n    return +date - +utcDate;\r\n}\r\n", "/** Regex to identify the presence of a time zone specifier in a date string */\r\nexport const tzPattern = /(Z|[+-]\\d{2}(?::?\\d{2})?| UTC| [a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?)$/;\r\n", "import { getTimezoneOffsetInMilliseconds } from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\r\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\r\nimport { tzPattern } from '../_lib/tzPattern/index.js';\r\nconst MILLISECONDS_IN_HOUR = 3600000;\r\nconst MILLISECONDS_IN_MINUTE = 60000;\r\nconst DEFAULT_ADDITIONAL_DIGITS = 2;\r\nconst patterns = {\r\n    dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\r\n    datePattern: /^([0-9W+-]+)(.*)/,\r\n    plainTime: /:/,\r\n    // year tokens\r\n    YY: /^(\\d{2})$/,\r\n    YYY: [\r\n        /^([+-]\\d{2})$/, // 0 additional digits\r\n        /^([+-]\\d{3})$/, // 1 additional digit\r\n        /^([+-]\\d{4})$/, // 2 additional digits\r\n    ],\r\n    YYYY: /^(\\d{4})/,\r\n    YYYYY: [\r\n        /^([+-]\\d{4})/, // 0 additional digits\r\n        /^([+-]\\d{5})/, // 1 additional digit\r\n        /^([+-]\\d{6})/, // 2 additional digits\r\n    ],\r\n    // date tokens\r\n    MM: /^-(\\d{2})$/,\r\n    DDD: /^-?(\\d{3})$/,\r\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\r\n    Www: /^-?W(\\d{2})$/,\r\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\r\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\r\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\r\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\r\n    // time zone tokens (to identify the presence of a tz)\r\n    timeZone: tzPattern,\r\n};\r\n/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If an argument is a string, the function tries to parse it.\r\n * Function accepts complete ISO 8601 formats as well as partial implementations.\r\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\r\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\r\n *\r\n * @param argument the value to convert\r\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\r\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\r\n * @param {string} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\r\n *\r\n * @returns the parsed date in the local time zone\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\r\n *\r\n * @example\r\n * // Convert string '2014-02-11T11:30:30' to date:\r\n * const result = toDate('2014-02-11T11:30:30')\r\n * //=> Tue Feb 11 2014 11:30:30\r\n *\r\n * @example\r\n * // Convert string '+02014101' to date,\r\n * // if the additional number of digits in the extended year format is 1:\r\n * const result = toDate('+02014101', {additionalDigits: 1})\r\n * //=> Fri Apr 11 2014 00:00:00\r\n */\r\nexport function toDate(argument, options = {}) {\r\n    if (arguments.length < 1) {\r\n        throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\r\n    }\r\n    if (argument === null) {\r\n        return new Date(NaN);\r\n    }\r\n    const additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\r\n    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\r\n        throw new RangeError('additionalDigits must be 0, 1 or 2');\r\n    }\r\n    // Clone the date\r\n    if (argument instanceof Date ||\r\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')) {\r\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\r\n        return new Date(argument.getTime());\r\n    }\r\n    else if (typeof argument === 'number' ||\r\n        Object.prototype.toString.call(argument) === '[object Number]') {\r\n        return new Date(argument);\r\n    }\r\n    else if (!(Object.prototype.toString.call(argument) === '[object String]')) {\r\n        return new Date(NaN);\r\n    }\r\n    const dateStrings = splitDateString(argument);\r\n    const { year, restDateString } = parseYear(dateStrings.date, additionalDigits);\r\n    const date = parseDate(restDateString, year);\r\n    if (date === null || isNaN(date.getTime())) {\r\n        return new Date(NaN);\r\n    }\r\n    if (date) {\r\n        const timestamp = date.getTime();\r\n        let time = 0;\r\n        let offset;\r\n        if (dateStrings.time) {\r\n            time = parseTime(dateStrings.time);\r\n            if (time === null || isNaN(time)) {\r\n                return new Date(NaN);\r\n            }\r\n        }\r\n        if (dateStrings.timeZone || options.timeZone) {\r\n            offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time));\r\n            if (isNaN(offset)) {\r\n                return new Date(NaN);\r\n            }\r\n        }\r\n        else {\r\n            // get offset accurate to hour in time zones that change offset\r\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\r\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\r\n        }\r\n        return new Date(timestamp + time + offset);\r\n    }\r\n    else {\r\n        return new Date(NaN);\r\n    }\r\n}\r\nfunction splitDateString(dateString) {\r\n    const dateStrings = {};\r\n    let parts = patterns.dateTimePattern.exec(dateString);\r\n    let timeString;\r\n    if (!parts) {\r\n        parts = patterns.datePattern.exec(dateString);\r\n        if (parts) {\r\n            dateStrings.date = parts[1];\r\n            timeString = parts[2];\r\n        }\r\n        else {\r\n            dateStrings.date = null;\r\n            timeString = dateString;\r\n        }\r\n    }\r\n    else {\r\n        dateStrings.date = parts[1];\r\n        timeString = parts[3];\r\n    }\r\n    if (timeString) {\r\n        const token = patterns.timeZone.exec(timeString);\r\n        if (token) {\r\n            dateStrings.time = timeString.replace(token[1], '');\r\n            dateStrings.timeZone = token[1].trim();\r\n        }\r\n        else {\r\n            dateStrings.time = timeString;\r\n        }\r\n    }\r\n    return dateStrings;\r\n}\r\nfunction parseYear(dateString, additionalDigits) {\r\n    if (dateString) {\r\n        const patternYYY = patterns.YYY[additionalDigits];\r\n        const patternYYYYY = patterns.YYYYY[additionalDigits];\r\n        // YYYY or ±YYYYY\r\n        let token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\r\n        if (token) {\r\n            const yearString = token[1];\r\n            return {\r\n                year: parseInt(yearString, 10),\r\n                restDateString: dateString.slice(yearString.length),\r\n            };\r\n        }\r\n        // YY or ±YYY\r\n        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\r\n        if (token) {\r\n            const centuryString = token[1];\r\n            return {\r\n                year: parseInt(centuryString, 10) * 100,\r\n                restDateString: dateString.slice(centuryString.length),\r\n            };\r\n        }\r\n    }\r\n    // Invalid ISO-formatted year\r\n    return {\r\n        year: null,\r\n    };\r\n}\r\nfunction parseDate(dateString, year) {\r\n    // Invalid ISO-formatted year\r\n    if (year === null) {\r\n        return null;\r\n    }\r\n    let date;\r\n    let month;\r\n    let week;\r\n    // YYYY\r\n    if (!dateString || !dateString.length) {\r\n        date = new Date(0);\r\n        date.setUTCFullYear(year);\r\n        return date;\r\n    }\r\n    // YYYY-MM\r\n    let token = patterns.MM.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        month = parseInt(token[1], 10) - 1;\r\n        if (!validateDate(year, month)) {\r\n            return new Date(NaN);\r\n        }\r\n        date.setUTCFullYear(year, month);\r\n        return date;\r\n    }\r\n    // YYYY-DDD or YYYYDDD\r\n    token = patterns.DDD.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        const dayOfYear = parseInt(token[1], 10);\r\n        if (!validateDayOfYearDate(year, dayOfYear)) {\r\n            return new Date(NaN);\r\n        }\r\n        date.setUTCFullYear(year, 0, dayOfYear);\r\n        return date;\r\n    }\r\n    // yyyy-MM-dd or YYYYMMDD\r\n    token = patterns.MMDD.exec(dateString);\r\n    if (token) {\r\n        date = new Date(0);\r\n        month = parseInt(token[1], 10) - 1;\r\n        const day = parseInt(token[2], 10);\r\n        if (!validateDate(year, month, day)) {\r\n            return new Date(NaN);\r\n        }\r\n        date.setUTCFullYear(year, month, day);\r\n        return date;\r\n    }\r\n    // YYYY-Www or YYYYWww\r\n    token = patterns.Www.exec(dateString);\r\n    if (token) {\r\n        week = parseInt(token[1], 10) - 1;\r\n        if (!validateWeekDate(week)) {\r\n            return new Date(NaN);\r\n        }\r\n        return dayOfISOWeekYear(year, week);\r\n    }\r\n    // YYYY-Www-D or YYYYWwwD\r\n    token = patterns.WwwD.exec(dateString);\r\n    if (token) {\r\n        week = parseInt(token[1], 10) - 1;\r\n        const dayOfWeek = parseInt(token[2], 10) - 1;\r\n        if (!validateWeekDate(week, dayOfWeek)) {\r\n            return new Date(NaN);\r\n        }\r\n        return dayOfISOWeekYear(year, week, dayOfWeek);\r\n    }\r\n    // Invalid ISO-formatted date\r\n    return null;\r\n}\r\nfunction parseTime(timeString) {\r\n    let hours;\r\n    let minutes;\r\n    // hh\r\n    let token = patterns.HH.exec(timeString);\r\n    if (token) {\r\n        hours = parseFloat(token[1].replace(',', '.'));\r\n        if (!validateTime(hours)) {\r\n            return NaN;\r\n        }\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\r\n    }\r\n    // hh:mm or hhmm\r\n    token = patterns.HHMM.exec(timeString);\r\n    if (token) {\r\n        hours = parseInt(token[1], 10);\r\n        minutes = parseFloat(token[2].replace(',', '.'));\r\n        if (!validateTime(hours, minutes)) {\r\n            return NaN;\r\n        }\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\r\n    }\r\n    // hh:mm:ss or hhmmss\r\n    token = patterns.HHMMSS.exec(timeString);\r\n    if (token) {\r\n        hours = parseInt(token[1], 10);\r\n        minutes = parseInt(token[2], 10);\r\n        const seconds = parseFloat(token[3].replace(',', '.'));\r\n        if (!validateTime(hours, minutes, seconds)) {\r\n            return NaN;\r\n        }\r\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\r\n    }\r\n    // Invalid ISO-formatted time\r\n    return null;\r\n}\r\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\r\n    week = week || 0;\r\n    day = day || 0;\r\n    const date = new Date(0);\r\n    date.setUTCFullYear(isoWeekYear, 0, 4);\r\n    const fourthOfJanuaryDay = date.getUTCDay() || 7;\r\n    const diff = week * 7 + day + 1 - fourthOfJanuaryDay;\r\n    date.setUTCDate(date.getUTCDate() + diff);\r\n    return date;\r\n}\r\n// Validation functions\r\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\nconst DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\nfunction isLeapYearIndex(year) {\r\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\nfunction validateDate(year, month, date) {\r\n    if (month < 0 || month > 11) {\r\n        return false;\r\n    }\r\n    if (date != null) {\r\n        if (date < 1) {\r\n            return false;\r\n        }\r\n        const isLeapYear = isLeapYearIndex(year);\r\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\r\n            return false;\r\n        }\r\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction validateDayOfYearDate(year, dayOfYear) {\r\n    if (dayOfYear < 1) {\r\n        return false;\r\n    }\r\n    const isLeapYear = isLeapYearIndex(year);\r\n    if (isLeapYear && dayOfYear > 366) {\r\n        return false;\r\n    }\r\n    if (!isLeapYear && dayOfYear > 365) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validateWeekDate(week, day) {\r\n    if (week < 0 || week > 52) {\r\n        return false;\r\n    }\r\n    if (day != null && (day < 0 || day > 6)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validateTime(hours, minutes, seconds) {\r\n    if (hours < 0 || hours >= 25) {\r\n        return false;\r\n    }\r\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\r\n        return false;\r\n    }\r\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n", "import { format as dateFnsFormat } from 'date-fns/format';\r\nimport { formatters } from './formatters/index.js';\r\nimport { toDate } from '../toDate/index.js';\r\nconst tzFormattingTokensRegExp = /([xXOz]+)|''|'(''|[^'])+('|$)/g;\r\n/**\r\n * @name format\r\n * @category Common Helpers\r\n * @summary Format the date.\r\n *\r\n * @description\r\n * Return the formatted date string in the given format. The result may consty by locale.\r\n *\r\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\r\n * > See: https://git.io/fxCyr\r\n *\r\n * The characters wrapped between two single quotes characters (') are escaped.\r\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\r\n * (see the last example)\r\n *\r\n * Format of the string is based on Unicode Technical Standard #35:\r\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * with a few additions (see note 7 below the table).\r\n *\r\n * Accepted patterns:\r\n * | Unit                            | Pattern | Result examples                   | Notes |\r\n * |---------------------------------|---------|-----------------------------------|-------|\r\n * | Era                             | G..GGG  | AD, BC                            |       |\r\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\r\n * |                                 | GGGGG   | A, B                              |       |\r\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\r\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\r\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\r\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\r\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\r\n * |                                 | yyyyy   | ...                               | 3,5   |\r\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\r\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\r\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\r\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\r\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\r\n * |                                 | YYYYY   | ...                               | 3,5   |\r\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\r\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\r\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\r\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\r\n * |                                 | RRRRR   | ...                               | 3,5,7 |\r\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\r\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\r\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\r\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\r\n * |                                 | uuuuu   | ...                               | 3,5   |\r\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\r\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\r\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\r\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\r\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\r\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\r\n * |                                 | qq      | 01, 02, 03, 04                    |       |\r\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\r\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\r\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\r\n * |                                 | MM      | 01, 02, ..., 12                   |       |\r\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\r\n * |                                 | MMMM    | January, February, ..., December  | 2     |\r\n * |                                 | MMMMM   | J, F, ..., D                      |       |\r\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\r\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\r\n * |                                 | LL      | 01, 02, ..., 12                   |       |\r\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\r\n * |                                 | LLLL    | January, February, ..., December  | 2     |\r\n * |                                 | LLLLL   | J, F, ..., D                      |       |\r\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\r\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\r\n * |                                 | ww      | 01, 02, ..., 53                   |       |\r\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\r\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\r\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\r\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\r\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\r\n * |                                 | dd      | 01, 02, ..., 31                   |       |\r\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |\r\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\r\n * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |\r\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\r\n * |                                 | DDDD    | ...                               | 3     |\r\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\r\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\r\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\r\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\r\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\r\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\r\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\r\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\r\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\r\n * |                                 | ee      | 02, 03, ..., 01                   |       |\r\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\r\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\r\n * |                                 | cc      | 02, 03, ..., 01                   |       |\r\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\r\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\r\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\r\n * |                                 | aaaaa   | a, p                              |       |\r\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\r\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\r\n * |                                 | bbbbb   | a, p, n, mi                       |       |\r\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\r\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\r\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\r\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\r\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\r\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\r\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\r\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\r\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\r\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\r\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\r\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\r\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\r\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\r\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\r\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\r\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\r\n * |                                 | mm      | 00, 01, ..., 59                   |       |\r\n * | Second                          | s       | 0, 1, ..., 59                     |       |\r\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\r\n * |                                 | ss      | 00, 01, ..., 59                   |       |\r\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\r\n * |                                 | SS      | 00, 01, ..., 99                   |       |\r\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\r\n * |                                 | SSSS    | ...                               | 3     |\r\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\r\n * |                                 | XX      | -0800, +0530, Z                   |       |\r\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\r\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\r\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\r\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\r\n * |                                 | xx      | -0800, +0530, +0000               |       |\r\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\r\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\r\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\r\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\r\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\r\n * | Timezone (specific non-locat.)  | z...zzz | PDT, EST, CEST                    | 6     |\r\n * |                                 | zzzz    | Pacific Daylight Time             | 2,6   |\r\n * | Seconds timestamp               | t       | 512969520                         | 7     |\r\n * |                                 | tt      | ...                               | 3,7   |\r\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\r\n * |                                 | TT      | ...                               | 3,7   |\r\n * | Long localized date             | P       | 05/29/1453                        | 7     |\r\n * |                                 | PP      | May 29, 1453                      | 7     |\r\n * |                                 | PPP     | May 29th, 1453                    | 7     |\r\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\r\n * | Long localized time             | p       | 12:00 AM                          | 7     |\r\n * |                                 | pp      | 12:00:00 AM                       | 7     |\r\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\r\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\r\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\r\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\r\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\r\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\r\n * Notes:\r\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\r\n *    are the same as \"stand-alone\" units, but are different in some languages.\r\n *    \"Formatting\" units are declined according to the rules of the language\r\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\r\n *\r\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\r\n *    the single quote characters (see below).\r\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\r\n *    the output will be the same as default pattern for this unit, usually\r\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\r\n *    are marked with \"2\" in the last column of the table.\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\r\n *\r\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\r\n *    The output will be padded with zeros to match the length of the pattern.\r\n *\r\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\r\n *\r\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\r\n *    These tokens represent the shortest form of the quarter.\r\n *\r\n * 5. The main difference between `y` and `u` patterns are B.C. years:\r\n *\r\n *    | Year | `y` | `u` |\r\n *    |------|-----|-----|\r\n *    | AC 1 |   1 |   1 |\r\n *    | BC 1 |   1 |   0 |\r\n *    | BC 2 |   2 |  -1 |\r\n *\r\n *    Also `yy` always returns the last two digits of a year,\r\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\r\n *\r\n *    | Year | `yy` | `uu` |\r\n *    |------|------|------|\r\n *    | 1    |   01 |   01 |\r\n *    | 14   |   14 |   14 |\r\n *    | 376  |   76 |  376 |\r\n *    | 1453 |   53 | 1453 |\r\n *\r\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\r\n *    except local week-numbering years are dependent on `options.weekStartsOn`\r\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\r\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\r\n *\r\n * 6. Specific non-location timezones are created using the Intl browser API. The output is determined by the\r\n *    preferred standard of the current locale (en-US by default) which may not always give the expected result.\r\n *    For this reason it is recommended to supply a `locale` in the format options when formatting a time zone name.\r\n *\r\n * 7. These patterns are not in the Unicode Technical Standard #35:\r\n *    - `i`: ISO day of week\r\n *    - `I`: ISO week of year\r\n *    - `R`: ISO week-numbering year\r\n *    - `t`: seconds timestamp\r\n *    - `T`: milliseconds timestamp\r\n *    - `o`: ordinal number modifier\r\n *    - `P`: long localized date\r\n *    - `p`: long localized time\r\n *\r\n * 8. These tokens are often confused with others. See: https://git.io/fxCyr\r\n *\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole\r\n *   library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The second argument is now required for the sake of explicitness.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   format(new Date(2016, 0, 1))\r\n *\r\n *   // v2.0.0 onward\r\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\r\n *   ```\r\n *\r\n * - New format string API for `format` function\r\n *   which is based on [Unicode Technical Standard\r\n *   #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). See [this\r\n *   post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\r\n *\r\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\r\n *\r\n * @param date the original date\r\n * @param formatStr the string of tokens\r\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\r\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\r\n *   https://date-fns.org/docs/toDate}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\r\n *   [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\r\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\r\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\r\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\r\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\r\n * @param {Date|Number} [options.originalDate] - can be used to pass the original unmodified date to `format` to\r\n *   improve correctness of the replaced timezone token close to the DST threshold.\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\r\n * @throws {RangeError} `options.locale` must contain `localize` property\r\n * @throws {RangeError} `options.locale` must contain `formatLong` property\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see:\r\n *   https://git.io/fxCyr\r\n *\r\n * @example\r\n * // Represent 11 February 2014 in middle-endian format:\r\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\r\n * //=> '02/11/2014'\r\n *\r\n * @example\r\n * // Represent 2 July 2014 in Esperanto:\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\r\n *   locale: eoLocale\r\n * })\r\n * //=> '2-a de julio 2014'\r\n *\r\n * @example\r\n * // Escape string by single quote characters:\r\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\r\n * //=> \"3 o'clock\"\r\n */\r\nexport function format(date, formatStr, options = {}) {\r\n    formatStr = String(formatStr);\r\n    const matches = formatStr.match(tzFormattingTokensRegExp);\r\n    if (matches) {\r\n        const d = toDate(options.originalDate || date, options);\r\n        // Work through each match and replace the tz token in the format string with the quoted\r\n        // formatted time zone so the remaining tokens can be filled in by date-fns#format.\r\n        formatStr = matches.reduce(function (result, token) {\r\n            if (token[0] === \"'\") {\r\n                return result; // This is a quoted portion, matched only to ensure we don't match inside it\r\n            }\r\n            const pos = result.indexOf(token);\r\n            const precededByQuotedSection = result[pos - 1] === \"'\";\r\n            const replaced = result.replace(token, \"'\" + formatters[token[0]](d, token, options) + \"'\");\r\n            // If the replacement results in two adjoining quoted strings, the back to back quotes\r\n            // are removed, so it doesn't look like an escaped quote.\r\n            return precededByQuotedSection\r\n                ? replaced.substring(0, pos - 1) + replaced.substring(pos + 1)\r\n                : replaced;\r\n        }, formatStr);\r\n    }\r\n    return dateFnsFormat(date, formatStr, options);\r\n}\r\n", "import { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\r\nimport { toDate } from '../toDate/index.js';\r\n/**\r\n * @name toZonedTime\r\n * @category Time Zone Helpers\r\n * @summary Get a date/time representing local time in a given time zone from the UTC date\r\n *\r\n * @description\r\n * Returns a date instance with values representing the local time in the time zone\r\n * specified of the UTC time from the date provided. In other words, when the new date\r\n * is formatted it will show the equivalent hours in the target time zone regardless\r\n * of the current system time zone.\r\n *\r\n * @param date the date with the relevant UTC time\r\n * @param timeZone the time zone to get local time for, can be an offset or IANA time zone\r\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\r\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\r\n *\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\r\n *\r\n * @example\r\n * // In June 10am UTC is 6am in New York (-04:00)\r\n * const result = toZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\r\n * //=> Jun 25 2014 06:00:00\r\n */\r\nexport function toZonedTime(date, timeZone, options) {\r\n    date = toDate(date, options);\r\n    const offsetMilliseconds = tzParseTimezone(timeZone, date, true);\r\n    const d = new Date(date.getTime() - offsetMilliseconds);\r\n    const resultDate = new Date(0);\r\n    resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\r\n    resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\r\n    return resultDate;\r\n}\r\n", "import { format } from '../format/index.js';\r\nimport { toZonedTime } from '../toZonedTime/index.js';\r\n/**\r\n * @name formatInTimeZone\r\n * @category Time Zone Helpers\r\n * @summary Gets the offset in milliseconds between the time zone and Universal Coordinated Time (UTC)\r\n *\r\n * @param date the date representing the local time / real UTC time\r\n * @param timeZone the time zone this date should be formatted for; can be an offset or IANA time zone\r\n * @param formatStr the string of tokens\r\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\r\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\r\n *   https://date-fns.org/docs/toDate}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\r\n *   [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\r\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\r\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\r\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\r\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\r\n */\r\nexport function formatInTimeZone(date, timeZone, formatStr, options) {\r\n    options = {\r\n        ...options,\r\n        timeZone,\r\n        originalDate: date,\r\n    };\r\n    return format(toZonedTime(date, timeZone, { timeZone: options.timeZone }), formatStr, options);\r\n}\r\n", "import { toDate } from '../toDate/index.js';\r\nimport { tzPattern } from '../_lib/tzPattern/index.js';\r\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\r\nimport { newDateUTC } from '../_lib/newDateUTC/index.js';\r\n/**\r\n * @name fromZonedTime\r\n * @category Time Zone Helpers\r\n * @summary Get the UTC date/time from a date representing local time in a given time zone\r\n *\r\n * @description\r\n * Returns a date instance with the UTC time of the provided date of which the values\r\n * represented the local time in the time zone specified. In other words, if the input\r\n * date represented local time in time zone, the timestamp of the output date will\r\n * give the equivalent UTC of that local time regardless of the current system time zone.\r\n *\r\n * @param date the date with values representing the local time\r\n * @param timeZone the time zone of this local time, can be an offset or IANA time zone\r\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\r\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\r\n *\r\n * @example\r\n * // In June 10am in Los Angeles is 5pm UTC\r\n * const result = fromZonedTime(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\r\n * //=> 2014-06-25T17:00:00.000Z\r\n */\r\nexport function fromZonedTime(date, timeZone, options) {\r\n    if (typeof date === 'string' && !date.match(tzPattern)) {\r\n        return toDate(date, { ...options, timeZone });\r\n    }\r\n    date = toDate(date, options);\r\n    const utc = newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()).getTime();\r\n    const offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc));\r\n    return new Date(utc + offsetMilliseconds);\r\n}\r\n", "import { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\r\n/**\r\n * @name getTimezoneOffset\r\n * @category Time Zone Helpers\r\n * @summary Gets the offset in milliseconds between the time zone and Universal Coordinated Time (UTC)\r\n *\r\n * @description\r\n * Returns the time zone offset from UTC time in milliseconds for IANA time zones as well\r\n * as other time zone offset string formats.\r\n *\r\n * For time zones where daylight savings time is applicable a `Date` should be passed on\r\n * the second parameter to ensure the offset correctly accounts for DST at that time of\r\n * year. When omitted, the current date is used.\r\n *\r\n * @param timeZone the time zone of this local time, can be an offset or IANA time zone\r\n * @param date the date with values representing the local time\r\n *\r\n * @example\r\n * const result = getTimezoneOffset('-07:00')\r\n *   //=> -18000000 (-7 * 60 * 60 * 1000)\r\n * const result = getTimezoneOffset('Africa/Johannesburg')\r\n *   //=> 7200000 (2 * 60 * 60 * 1000)\r\n * const result = getTimezoneOffset('America/New_York', new Date(2016, 0, 1))\r\n *   //=> -18000000 (-5 * 60 * 60 * 1000)\r\n * const result = getTimezoneOffset('America/New_York', new Date(2016, 6, 1))\r\n *   //=> -14400000 (-4 * 60 * 60 * 1000)\r\n */\r\nexport function getTimezoneOffset(timeZone, date) {\r\n    return -tzParseTimezone(timeZone, date);\r\n}\r\n"],
  "mappings": "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",
  "names": ["MILLISECONDS_IN_MINUTE", "MILLISECONDS_IN_HOUR", "MILLISECONDS_IN_MINUTE", "patterns", "format", "format"]
}
